
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
RENAME_DICT = {
    'Id': 'id',
    'MSSubClass': 'ms_sub_class',
    'MSZoning': 'ms_zoning',
    'LotFrontage': 'lot_frontage',
    'LotArea': 'lot_area',
    'Street': 'street',
    'Alley': 'alley',
    'LotShape': 'lot_shape',
    'LandContour': 'land_contour',
    'Utilities': 'utilities',
    'LotConfig': 'lot_config',
    'LandSlope': 'land_slope',
    'Neighborhood': 'neighborhood',
    'Condition1': 'condition1',
    'Condition2': 'condition2',
    'BldgType': 'bldg_type',
    'HouseStyle': 'house_style',
    'OverallQual': 'overall_qual',
    'OverallCond': 'overall_cond',
    'YearBuilt': 'year_built',
    'YearRemodAdd': 'year_remod_add',
    'RoofStyle': 'roof_style',
    'RoofMatl': 'roof_matl',
    'Exterior1st': 'exterior1st',
    'Exterior2nd': 'exterior2nd',
    'MasVnrType': 'mas_vnr_type',
    'MasVnrArea': 'mas_vnr_area',
    'ExterQual': 'exter_qual',
    'ExterCond': 'exter_cond',
    'Foundation': 'foundation',
    'BsmtQual': 'bsmt_qual',
    'BsmtCond': 'bsmt_cond',
    'BsmtExposure': 'bsmt_exposure',
    'BsmtFinType1': 'bsmt_fin_type1',
    'BsmtFinSF1': 'bsmt_fin_sf1',
    'BsmtFinType2': 'bsmt_fin_type2',
    'BsmtFinSF2': 'bsmt_fin_sf2',
    'BsmtUnfSF': 'bsmt_unf_sf',
    'TotalBsmtSF': 'total_bsmt_sf',
    'Heating': 'heating',
    'HeatingQC': 'heating_qc',
    'CentralAir': 'central_air',
    'Electrical': 'electrical',
    '1stFlrSF': '1st_flr_sf',
    '2ndFlrSF': '2nd_flr_sf',
    'LowQualFinSF': 'low_qual_fin_sf',
    'GrLivArea': 'gr_liv_area',
    'BsmtFullBath': 'bsmt_full_bath',
    'BsmtHalfBath': 'bsmt_half_bath',
    'FullBath': 'full_bath',
    'HalfBath': 'half_bath',
    'BedroomAbvGr': 'bedroom_abv_gr',
    'KitchenAbvGr': 'kitchen_abv_gr',
    'KitchenQual': 'kitchen_qual',
    'TotRmsAbvGrd': 'tot_rms_abv_grd',
    'Functional': 'functional',
    'Fireplaces': 'fireplaces',
    'FireplaceQu': 'fireplace_qu',
    'GarageType': 'garage_type',
    'GarageYrBlt': 'garage_yr_blt',
    'GarageFinish': 'garage_finish',
    'GarageCars': 'garage_cars',
    'GarageArea': 'garage_area',
    'GarageQual': 'garage_qual',
    'GarageCond': 'garage_cond',
    'PavedDrive': 'paved_drive',
    'WoodDeckSF': 'wood_deck_sf',
    'OpenPorchSF': 'open_porch_sf',
    'EnclosedPorch': 'enclosed_porch',
    '3SsnPorch': '3ssn_porch',
    'ScreenPorch': 'screen_porch',
    'PoolArea': 'pool_area',
    'PoolQC': 'pool_qc',
    'Fence': 'fence',
    'MiscFeature': 'misc_feature',
    'MiscVal': 'misc_val',
    'MoSold': 'mo_sold',
    'YrSold': 'yr_sold',
    'SaleType': 'sale_type',
    'SaleCondition': 'sale_condition',
    'SalePrice': 'sale_price'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def prepare_data(df):
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    df_prep = df.copy()
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–æ–≤–∞—Ä—é
    columns_to_rename = {}
    for orig_col, new_col in RENAME_DICT.items():
        if orig_col in df_prep.columns:
            columns_to_rename[orig_col] = new_col
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
    if columns_to_rename:
        df_prep.rename(columns=columns_to_rename, inplace=True)
        st.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(columns_to_rename)} –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ CamelCase –≤ snake_case")
    
    # –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'sale_price' in df_prep.columns and 'sale_price_log' not in df_prep.columns:
        df_prep['sale_price_log'] = np.log1p(df_prep['sale_price'])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    missing_values = df_prep.isnull().sum()
    if missing_values.any():
        missing_cols = missing_values[missing_values > 0]
        st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {missing_cols.sum()} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ {len(missing_cols)} –∫–æ–ª–æ–Ω–∫–∞—Ö. –û–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        
    return df_prep

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def train_model(df):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if 'sale_price_log' not in df.columns:
            st.error("–í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'sale_price_log'")
            return None, None
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        features = df.drop(['id', 'sale_price', 'sale_price_log'], axis=1, errors='ignore')
        target = df['sale_price_log']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        numeric_features = features.select_dtypes(include=['int64', 'float64']).columns.tolist()
        categorical_features = features.select_dtypes(include=['object']).columns.tolist()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        numeric_transformer = Pipeline([
            ('imputer', SimpleImputer(strategy='median')),  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–æ–π
        ])
        
        categorical_transformer = Pipeline([
            ('imputer', SimpleImputer(strategy='most_frequent')),  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))
        ])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        preprocessor = ColumnTransformer(
            transformers=[
                ('num', numeric_transformer, numeric_features),
                ('cat', categorical_transformer, categorical_features)
            ],
            remainder='drop'
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –º–æ–¥–µ–ª–∏
        model = Pipeline([
            ('preprocessor', preprocessor),
            ('regressor', LinearRegression())
        ])
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        y_pred = model.predict(X_test)
        r2 = r2_score(y_test, y_pred)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))
        
        return model, (r2, rmse)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        import traceback
        st.code(traceback.format_exc(), language="python")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(model, df):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª—å
        if model is None:
            st.error("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return None
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        predictions_log = model.predict(df)
        predictions = np.expm1(predictions_log)
        
        return predictions, predictions_log
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")
        import traceback
        st.code(traceback.format_exc(), language="python")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def display_results(predictions, df):
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results = df.copy()
    results['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞'] = predictions
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    st.dataframe(results)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    # st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    
    # col1, col2 = st.columns(2)
    
    # with col1:
    #     # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
    #     fig, ax = plt.subplots(figsize=(10, 6))
    #     sns.histplot(results['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞'], bins=20, kde=True)
    #     plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω')
    #     plt.xlabel('–¶–µ–Ω–∞')
    #     plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    #     st.pyplot(fig)
    
    # with col2:
    #     # –ë–æ–∫—Å–ø–ª–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
    #     fig, ax = plt.subplots(figsize=(10, 6))
    #     sns.boxplot(y=results['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞'])
    #     plt.title('–ë–æ–∫—Å–ø–ª–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω')
    #     plt.ylabel('–¶–µ–Ω–∞')
    #     st.pyplot(fig)
    
    # # –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –¥–æ–º–æ–≤
    # st.subheader("–¢–æ–ø-5 –¥–æ–º–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π")
    # top5 = results.sort_values(by='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞', ascending=False).head(5)
    # st.dataframe(top5)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    csv = results.to_csv(index=False)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        data=csv,
        file_name='real_estate_predictions.csv',
        mime='text/csv'
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.info("""
    
    –î–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –∑–∞—Ç–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
   
    """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    st.sidebar.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª")
    train_file = st.sidebar.file_uploader("–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π CSV", type=['csv'], key="train")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫
    model = None
    metrics = None
    
    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
    if train_file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_train = pd.read_csv(train_file)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_train = prepare_data(df_train)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        st.sidebar.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {df_train.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df_train.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        st.sidebar.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        st.sidebar.dataframe(df_train.head(3))
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        st.sidebar.text("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        model, metrics = train_model(df_train)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
        if model and metrics:
            r2, rmse = metrics
            st.sidebar.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            st.sidebar.metric("R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)", f"{r2:.4f}")
            st.sidebar.metric("RMSE (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏)", f"{rmse:.4f}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
    st.title("–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö
    # with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö"):
    #     st.write("""
    #     ### –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
    #     –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CamelCase (–∫–∞–∫ –≤ API Kaggle) –∏–ª–∏ snake_case.
        
    #     –ü—Ä–∏–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫:
    #     - `SalePrice` –∏–ª–∏ `sale_price` - —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    #     - `LotArea` –∏–ª–∏ `lot_area` - –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞
    #     - `YearBuilt` –∏–ª–∏ `year_built` - –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        
    #     –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ CamelCase –≤ snake_case.
    #     """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    test_file = st.file_uploader("–¢–µ—Å—Ç–æ–≤—ã–π CSV", type=['csv'], key="test")
    
    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞
    if test_file and model:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_test = pd.read_csv(test_file)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_test = prepare_data(df_test)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {df_test.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df_test.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df_test.head())
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            st.text("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            df_test_features = df_test.drop(['id', 'sale_price', 'sale_price_log'], axis=1, errors='ignore')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            predictions, _ = predict(model, df_test_features)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if predictions is not None:
                display_results(predictions, df_test)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞
    elif test_file and not model:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –∏ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    elif not test_file and model:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()